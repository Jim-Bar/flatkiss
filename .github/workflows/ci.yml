name: Build
on: workflow_dispatch
jobs:
  build-linux:
    runs-on: ubuntu-latest
    container:
        image: jimbar/${{ github.event.repository.name }}:0.1.0
        # Refer to the Dockerfile as to how to choose the user running the container. Here the UID
        # is hardcoded because it is not possible to get it dynamically. Refer to:
        # https://github.com/actions/checkout/issues/956
        options: --user 1001
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Build the project
        id: build-project
        uses: threeal/cmake-action@v1.3.0
        with:
          run-build: true
          source-dir: engine
      - name: Upload built program
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-linux
          path: ${{ steps.build-project.outputs.build-dir }}/${{ github.event.repository.name }}/${{ github.event.repository.name }}-bin
          retention-days: 1
          if-no-files-found: error
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set SDL2 up
        # Refer to the Dockerfile to find out which version of SDL to use. Not using brew for
        # installing SDL because the result would not be compatible with both arm64 and x86_64.
        # https://wiki.libsdl.org/SDL2/Installation
        run: |
          wget --output-document=${{ github.workspace }}/SDL.tar.gz https://github.com/libsdl-org/SDL/releases/download/release-2.28.2/SDL2-2.28.2.tar.gz
          mkdir ${{ github.workspace }}/sdl-source
          tar -xzf ${{ github.workspace }}/SDL.tar.gz --directory=${{ github.workspace }}/sdl-source --strip-components=1
          mkdir ${{ github.workspace }}/sdl-build
          cd ${{ github.workspace }}/sdl-build
          CC=${{ github.workspace }}/sdl-source/build-scripts/clang-fat.sh ${{ github.workspace }}/sdl-source/configure
          make
          sudo make install
      - name: Set IniPP up
        run: |
          wget https://raw.githubusercontent.com/mcmtroffaes/inipp/46248e4e93a2e63f9a1d0d8d9ad40bd6b3725df5/inipp/inipp.h
          sudo mv inipp.h /usr/local/include
      - name: Build the project
        id: build-project
        uses: threeal/cmake-action@v1.3.0
        with:
          run-build: true
          source-dir: engine
      - name: Link SDL library
        # Make sure the program finds and uses the shipped SDL library. The library must be in the
        # same directory as the program.
        run: |
          PROGRAM="${{ steps.build-project.outputs.build-dir }}/${{ github.event.repository.name }}/${{ github.event.repository.name }}-bin"
          OLD_DYLIB_PATH=$(otool -XL "${PROGRAM}" | head -1 | awk '{print $1;}')
          install_name_tool -change "${OLD_DYLIB_PATH}" @executable_path/libSDL2-2.0.0.dylib "${PROGRAM}"
      - name: Upload SDL library
        # Ship SDL with the program so that users have a working copy of it, compatible with the
        # built program (plus they do not have to install it themselves). Note that a seperate step
        # than the program upload step (but with the same name) is useful to flatten the directory
        # structure. Otherwise the artifacts would be nested in their source directory in the
        # resulting file.
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-macos
          path: ${{ github.workspace }}/sdl-build/build/.libs/libSDL2-2.0.0.dylib
          retention-days: 1
          if-no-files-found: error
      - name: Upload built program
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-macos
          path: ${{ steps.build-project.outputs.build-dir }}/${{ github.event.repository.name }}/${{ github.event.repository.name }}-bin
          retention-days: 1
          if-no-files-found: error
  sample-assets:
    runs-on: ubuntu-latest
    steps:
      - name: Set Python up
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Generate sample assets
        run: ${{ github.workspace }}/sample-assets/generators/generate_assets.py
      - name: Upload built artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sample-assets
          path: |
            ${{ github.workspace }}/configuration.ini
            ${{ github.workspace }}/assets
          retention-days: 1
          if-no-files-found: error
